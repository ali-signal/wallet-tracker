// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model List {
  id              String   @id @default(uuid())
  avatar          String?
  name            String
  twitter         String?
  description     String?
  walletsNumber   Int      @default(0)
  userId          String
  followersNumber Int      @default(0)
  active          Boolean  @default(true)
  public          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  wallets   ListWallet[] @relation("ListToListWallet")
  followers ListFollow[]
}

model ListFollow {
  id        String   @id @default(uuid())
  listId    String
  userId    String
  createdAt DateTime @default(now())

  list List @relation(fields: [listId], references: [id], onDelete: Cascade)
}

model ListWallet {
  id       String @id @default(uuid())
  listId   String
  walletId String

  list   List   @relation(fields: [listId], references: [id], name: "ListToListWallet", onDelete: Cascade)
  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([listId, walletId])
}

model Wallet {
  id        String   @id @default(uuid())
  address   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lists         ListWallet[]
  subscriptions Subscription[]
  aliases       UserWalletAlias[]
  follows       WalletFollow[]
}

model WalletFollow {
  id        String   @id @default(uuid())
  walletId  String
  userId    String
  createdAt DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String   @id @default(uuid())
  walletId  String
  userId    String
  chatId    String
  botId     String
  plan      String
  createdAt DateTime @default(now())

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
  bot    Bot    @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@unique([userId, walletId])
}

model UserWalletAlias {
  id       String @id @default(uuid())
  userId   String
  walletId String
  alias    String

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Bot {
  id         String  @id @default(uuid())
  token      String
  subsNumber Int     @default(0)
  active     Boolean @default(true)

  Subscription Subscription[]
}

model AccessToken {
  id        String   @id @default(uuid())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}
